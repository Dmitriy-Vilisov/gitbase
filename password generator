import math
import secrets
import string


vol1 = '''1. Использовать все доступные\n    2. Строчные буквы\n    3. Заглавные буквы\n    4. Заглавные и строчные\
буквы\n    5. Цифры\n    6. Специальные символы\n    7. Ввести свой пароль\n'''  # Текстовая замена


# БЛОК - ИНТЕРПРЕТАТОР. Интерпретирует выбранные наборы(цифры) в массивы данных, с которыми работает генератор
def request_creator(user_selection_chars, user_selection_length):
    for i in user_selection_chars:  # В автоматической генерации все наборы имеют тип int. Данная ветвь выполняется..
        if type(i) == str:          # В ручном вводе.
            password = "".join(user_selection_chars)
            alphabet_element = set()  # Массив, характеризующий введенный пароль(содержащиеся в нем наборы)
            alphabet = set()  # Массив, характеризующий общий набор символов. Необходим для работы дочерних функций.
            for c in password:
                if c.islower():
                    alphabet_element.add(26)  # 26 символов в английском алфавите. Тип int для избежания утраты в set()
                    alphabet.add(string.ascii_lowercase)
                if c.isupper():
                    alphabet_element.add('26')          # 26 Больших символов
                    alphabet.add(string.ascii_uppercase)
                if c.isdigit():
                    alphabet_element.add('10')          # 10 цифр
                    alphabet.add(string.digits)
                if not (c.isdigit() or c.isupper() or c.islower()):
                    alphabet_element.add('37')          # 37 символов
                    alphabet.add(string.punctuation)
            way = 'manual'  # Переменная для вывода уникальных меню в блоке анализа и завершающем блоке (end_func).
            return analyzer(password, alphabet_element, alphabet, user_selection_length, way)  # Минует генератор
    for i in range(len(user_selection_chars)):  # Интерпретирует выбранные наборы(цифры) в списки библиотеки string
        if user_selection_chars[i] == 1:
            user_selection_chars[i] = string.ascii_letters
            user_selection_chars += [string.digits, string.punctuation]
        if user_selection_chars[i] == 6:
            user_selection_chars[i] = string.punctuation
        if user_selection_chars[i] == 5:
            user_selection_chars[i] = string.digits
        if user_selection_chars[i] == 4:
            user_selection_chars[i] = string.ascii_letters
        if user_selection_chars[i] == 3:
            user_selection_chars[i] = string.ascii_uppercase
        if user_selection_chars[i] == 2:
            user_selection_chars[i] = string.ascii_lowercase
    if string.ascii_letters in user_selection_chars:  # _letters содержит и upper, и lower символы.
        if string.ascii_uppercase in user_selection_chars:  # Исключаем во избежание дубликатов. Set их не удалит.
            user_selection_chars.pop(user_selection_chars.index(string.ascii_uppercase))
        if string.ascii_lowercase in user_selection_chars:
            user_selection_chars.pop(user_selection_chars.index(string.ascii_lowercase))
    alphabet = list(set(user_selection_chars))  # избавляемся от дубликатов
    return comparison_conditions(alphabet, user_selection_length)


# БЛОК УСЛОВИЙ СРАВНЕНИЯ. Формирует set условий, который должен выполниться в цикле генератора, для усп. генерации.
def comparison_conditions(alphabet, user_selection_length):
    alphabet_element = []
    if 'a' in ','.join(alphabet):
        alphabet_element.append(26)     # 26 символов в английском алфавите. Тип int для избежания утраты в set()
    if 'A' in ','.join(alphabet):
        alphabet_element.append('26')   # 26 заглавных символов в английском алфавите.
    if '1' in ','.join(alphabet):
        alphabet_element.append('10')   # 10 цифр
    if '*' in ','.join(alphabet):
        alphabet_element.append('37')   # 37 символов
    alphabet_element = set(alphabet_element)  # set тк быстродействие; сравнение массивов не учитывает порядок элементов
    return secrets_generator(alphabet, user_selection_length, alphabet_element)


# БЛОК ГЕНЕРАТОРА. В нем, если выбран режим "auto" генерируется пароль.
def secrets_generator(alphabet, user_selection_length, alphabet_element):
    way = 'auto'  # Запись в переменную выбранного режима информации, необходимой для анализа и финального блока.
    while True:
        password = ''.join(secrets.choice("+".join(alphabet)) for _ in range(user_selection_length[0]))
        password_element = set()  # В итерацию, в которой сет соответствует alphabet_element, пароль соотв. требованиям.
        if sum(c.islower() for c in password) >= round(user_selection_length[0] / 5):
            password_element.add(26)
        if sum(c.isupper() for c in password) >= round(user_selection_length[0] / 5):
            password_element.add('26')
        if sum(c.isdigit() for c in password) >= round(user_selection_length[0] / 5):
            password_element.add('10')
        if sum(not (c.isdigit() or c.isupper() or c.islower()) for c in password) >= round(
                user_selection_length[0] / 5):
            password_element.add('37')
        if alphabet_element == password_element:  # True когда присутствуют одни и те же элементы. Порядок не важен.
            break
    return analyzer(password, alphabet_element, alphabet, user_selection_length, way)


# БЛОК АНАЛИЗА пароля
def analyzer(password, alphabet_element, alphabet, user_selection_length, way):
    # Расчет энтропии пароля. log2(уник.символы^длина пароля)
    entropy = round(math.log2(sum(int(selection) for selection in alphabet_element) ** user_selection_length[0]))
    _low = 'низкую'
    _mid = 'среднюю'
    _hard = 'высокую'
    complexity = []
    if entropy <= 25:
        complexity.append(_low)
    if (entropy > 25) and (entropy <= 44):
        complexity.append(_mid)
    if entropy > 44:
        complexity.append(_hard)
    print(f'Ваш пароль имеет {"".join(complexity)} сложность. Энтропия составляет {entropy} бит.'
          f'\nВаш пароль: {password}')
    if way == 'manual':  # Если пользователь ввел свой пароль, отсутствует пункт "сгенерировать снова"
        print(f'\n Выберете дальнейшие действия!\n1. Сгенерировать с другими параметрами\n2. Выход из генератора')
    if way == 'auto':
        print(f'\n Выберете дальнейшие действия!\n1. Сгенерировать снова\n2. Сгенерировать с другими параметрами\n'
              f'3. Выход из генератора')
    var = input()
    return end_func(var, alphabet, user_selection_length, way)


# БЛОК ВЫБОРА ДЕЙСТВИЯ при окончании работы генератора и анализатора
def end_func(var, alphabet, user_selection_length, way):
    try:            # Если пользователь опечатался, необходимо предложить ему ввести заново. Исключить вылет программы.
        if way == 'manual':
            var = int(var) + 1                      # Необходимо для поправки согласованности режимов
        if (int(var) > 3) or (int(var) < 0):
            print('Ошибка ввода! введите число из указанного диапазона')
            var = input()
            return end_func(var, alphabet, user_selection_length, way)
        else:
            var = int(var)
            if var == 1:    # Повторная генерация, с текущими значениями. Переход к формированию массивов сравнения
                return comparison_conditions(alphabet, user_selection_length)
            if var == 2:
                return menu()     # аВыход в начальное меню выбор.
            if var == 3:
                return print('Завершение работы')
    except ValueError:
        if way == 'manual':
            print(f'Ошибка ввода! Выберете дальнейшие действия!\n1. Сгенерировать с другими параметрами\n2. Выход из '
                  f'генератора')
        if way == 'auto':
            print(f'Ошибка ввода! Пожалуйста,выберете дальнейшие действия!\n 1. Сгенерировать снова!\n'
                  f'2. Сгенерировать с другими параметрами\n 3. Выход из генератора')
        var = input()
        return end_func(var, alphabet, user_selection_length, way)


# ОБРАБОТЧИК ВВОДА, проверяет введенные данные на предмет ошибок ввода. Формирует запрос в "создатель_запроса"
def function(chars, password_length):
    user_selection_chars = []  # переменная для сохранения пользовательского списка символов
    user_selection_length = []  # переменная для сохранения пользовательской длины пароля
    chars_error = []  # переменная для учета ошибок, связанных с пользовательским списком символов
    error_password_length = []  # переменная для учета ошибок, связанных выбранной длинной пароля
    allowed_item = ['1', '2', '3', '4', '5', '6', '7', ' ', ',', '.']  # символы разрешенные для ввода
    for i in chars:  # проверка введенных данных в окне выбора символов, на предмет ошибки ввода
        if i not in allowed_item:
            chars_error.append(i)
        else:
            if i in ['1', '2', '3', '4', '5', '6', '7']:
                i = int(i)
                user_selection_chars.append(i)  # формирования списка выбранных символов для генерации пароля
    try:                                        # проверка является результат ввода строки одним числом
        if (int(password_length) > 30) or (int(password_length) < 4):
            error_password_length = ['ошибка']  # учет границ диапазона длины пароля
        else:
            user_selection_length.append(int(password_length))
    except ValueError:
        error_password_length = ['ошибка']  # если результат ввода не приводится к числу = заполнение листа с ошибкой
    '''Блок подсчета ошибок. В зависимости от того где была совершена ошибка программа попросит ввести данные заново. 
    Затем функция повторно произведет вычисления'''
    if '7' in ''.join(chars):
        if len(chars) > 1:
            print('''Ошибка! нельзя совместить автоматическую генерацию и ручной ввод пароля!''')
            return menu()
    if chars_error + error_password_length != []:
        if chars_error:
            print(f'''Следующие символы недопустимы: {(', '.join(chars_error))}.  
                 Пожалуйста, выберете указанные ниже наборы символов\n{vol1}''')
            chars = {i for i in input()}
        if error_password_length:
            print('пожалуйста, укажите желаемую длину пароля в пределах от 4 до 30 символов используя арабские цифры:')
            password_length = input()
        return function(chars, password_length)
    if len(chars) < 1:
        user_selection_chars.append(1)
        print("Вы не выбрали наборы символов, генерация прошла с использованием всех наборов")
    return request_creator(user_selection_chars, user_selection_length)
# Функция возвращает список формата [[], []]. В первом подсписке хранится информация о выбранных символах.
# Во втором о количестве символов пароля


# БЛОК ВВОДА, а так же проверка не является ли выбор пользователя "7" (Ручной ввод.)
def menu():      
    chars = {i for i in input(f'''Какие наборы символов из ниже приведенных вы хотите использовать для генерации пароля?
    {vol1}''')}             # Ввод выбранных наборов символов."set" позволяет не дублировать случайно набранные числа.
    if '7' in chars:
        if len(list(set(chars))) == 1:  # проверка, что пользователь не пытается совместить автоген, и ручной ввод
            user_selection_chars = [i for i in input('Введите Ваш пароль длиной от 4 символов до 30 символов\n')]
            selection_length = len(user_selection_chars)
            if (selection_length > 30) or (selection_length < 4):
                user_selection_chars = [i for i in input('Пароль не может быть менее 4  и более 30 символов.\
Пожалуйста введите Ваш пароль\n')]
                selection_length = len(user_selection_chars)
            if (selection_length > 30) or (selection_length < 4):   # повторная ошибка выводит к начальному меню выбора
                print('Ошибка. Возвращение в начало')
                return menu()
            else:  # так как введенные данные минуют обработчик ввода, результат записывается в переменные, с названиями
                user_selection_length = [selection_length]              # которые он предоставляет "создателю_запроса"
                return request_creator(user_selection_chars, user_selection_length)
    password_length = input('Укажите желаемую длину пароля в пределах от 4 до 30 символов  используя арабские цифры: ')
    return function(chars, password_length)


menu()  # СТАРТ
